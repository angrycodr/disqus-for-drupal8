<?php

/**
 * @file
 * The Disqus Drupal module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * API No action on entity delete.
 */
define('DISQUS_API_NO_ACTION', 0);

/**
 * API Close on entity delete.
 */
define('DISQUS_API_CLOSE', 1);

/**
 * API Remove on entity delete.
 */
define('DISQUS_API_REMOVE', 2);

/**
 * Implements hook_help().
 */
function disqus_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.disqus':
      $output = '<p>'. t('Uses the <a href="!disqus">Disqus</a> comment system to enhance comments.', array('!disqus' => 'http://disqus.com')) .'</p>';
      $output.= '<h3>'. t('Installation') .'</h3>';
      $output.= '<ol><li>'. t('Register your site information at <a href="!disqus">Disqus</a>.', array('!disqus' => 'http://disqus.com')) .'</li>';
      $output.= '<li>'. t('In the <a href="!configuration">Disqus configuration</a>, set the domain to what you registered with Disqus.', array('!configuration' => \Drupal::url('disqus.settings'))) .'</li>';
      $output.= '<li>'. t('Disqus comments can be enabled for any <a href="!entity-help">entity sub-type </a> (for example, a <a href="!content-type">content type</a>). On the Manage fields page for each entity sub-type, you can enable disqus by adding a Disqus comments field.', array('!entity-help' => \Drupal::url('help.page', array('name' => 'entity')), '!content-type' => \Drupal::url('node.overview_types'))) .'</li>';
      $output.= '<li>'. t('Alternatively disqus comments can be used on <a href="!blocks">Blocks</a>. You will first need to configure the disqus comment field for any entity sub-type.', array('!blocks' => \Drupal::url('block.admin_display'))) . '</li>';
      $output.= '<li>'. t('Visit the <a href="!permissions">permissions</a>, and set which users you would like to have the ability to view Disqus threads (recommended for role).', array('!permissions' => \Drupal::url('user.admin_permissions', array(), array('fragment' => 'module-disqus')))) .'</li></ol>';
      return $output;
    case 'disqus.settings':
      return '<p>'. t('The following provides the general configuration options for the <a href="!disqus">Disqus</a> comment web service.', array('!disqus' => 'http://disqus.com')) .'</p>';
  }
}

/**
 * Implements hook_permission().
 */
function disqus_permission() {
  return array(
    'administer disqus' => array(
      'title' => t('Administer Disqus'),
      'description' => t('Perform administrative actions with Disqus.'),
    ),
    'view disqus comments' => array(
      'title' => t('View Disqus comments'),
      'description' => t('Allows access to view Disqus comments.')
    ),
    'display disqus comments on profile' => array(
      'title' => t('Disqus comments in profile'),
      'description' => t('When enabled, will display Disqus comments on the profiles of users belonging to this role.'),
    ),
    'toggle disqus comments' => array(
      'title' => t('Toggle Disqus comments'),
      'description' => t('When enabled, will allow users to toggle comments on and off on nodes.'),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function disqus_element_info() {
  $types['disqus'] = array(
    '#disqus' => array(),
    '#theme_wrappers' => array('disqus_noscript', 'container'),
    '#attributes' => array('id' => 'disqus_thread'),
  );
  return $types;
}

/**
 * Post render function of the Disqus element to inject the Disqus JavaScript.
 */
function disqus_element_post_render_cache(array $element, array $context) {
  // Construct the settings to be passed in for Disqus.
  $entity = $context['entity'];
  $disqus = array(
    'domain' => \Drupal::config('disqus.settings')->get('disqus_domain'),
    'url' => $entity->url('canonical',array('absolute' => TRUE)),
    'title' => $entity->label(),
    'identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}",
  );
  $disqus['disable_mobile'] = \Drupal::config('disqus.settings')->get('behavior.disqus_disable_mobile');

  // If the user is logged in, we can inject the username and email for Disqus.
  $account = \Drupal::currentUser();

  if (\Drupal::config('disqus.settings')->get('behavior.disqus_inherit_login') && !$account->isAnonymous()) {
    $disqus['name'] = $account->getUsername();
    $disqus['email'] = $account->getEmail();
  }

  // Provide alternate language support if desired.
  if (\Drupal::config('disqus.settings')->get('behavior.disqus_localization')) {
    $language = \Drupal::languageManager()->getCurrentLanguage();
    $disqus['language'] = $language->id;
  }

  // Check if we are to provide Single Sign-On access.
  if (\Drupal::config('disqus.settings')->get('advanced.sso.disqus_sso')) {
    $disqus += \Drupal::service('disqus.manager')->disqus_sso_disqus_settings();
  }

  /**
   * Pass callbacks on if needed. Callbacks array is two dimensional array
   * with callback type as key on first level and array of JS callbacks on the
   * second level.
   *
   * Example:
   * @code
   * $element['#disqus']['callbacks'] = array(
   *   'onNewComment' => array(
   *     'myCallbackThatFiresOnCommentPost',
   *     'Drupal.mymodule.anotherCallbInsideDrupalObj',
   *   ),
   * );
   * @endcode
   */
  if (!empty($element['#disqus']['callbacks'])) {
    $disqus['callbacks'] = $element['#disqus']['callbacks'];
  }
  // Add the disqus.js and all the settings to process the JavaScript and load Disqus.
  $element['#attached']['js'][] = drupal_get_path('module', 'disqus') . '/disqus.js';
  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'disqus' => $disqus,
    ),
  );
  return $element;
}

/**
 * Implements hook_node_links_alter().
 */
function disqus_node_links_alter(array &$node_links, \Drupal\node\NodeInterface $node, array &$context) {
  $fields = \Drupal::service('disqus.manager')->getFields('node');
  foreach ($fields as $field_name => $detail) {
    //Skip fields that the node does not have.
    if(!$node->hasField($field_name)) {
      continue;
    }
    $links = array();
    if ($node->get($field_name)->status) {
      if (\Drupal::currentUser()->hasPermission('view disqus comments')) {
        if ($context['view_mode'] === 'teaser') {
            // Display the Disqus link.
            $links['disqus_comments_num'] = array(
              'title' => t('Comments'),
              'href' => $node->url('canonical',array('absolute' => TRUE)),
              'fragment' => 'disqus_thread',
              'attributes' => array(
                // Identify the node for Disqus with the unique identifier:
                // http://docs.disqus.com/developers/universal/#comment-count
                'data-disqus-identifier' => 'node/' . $node->id(),
              ),
            );
        }
        $node_links['disqus'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array(
            'class' => array('links', 'inline'),
          ),
        );

        // Attach disqus.js to load the Disqus comment count JavaScript.
        $node_links['disqus']['#attached']['js'][] = drupal_get_path('module', 'disqus') . '/disqus.js';
        $node_links['disqus']['#attached']['js'][] = array(
          'data' => array('disqusComments' => \Drupal::config('disqus.settings')->get('disqus_domain')),
          'type' => 'setting',
        );
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function disqus_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // Only act on content entities.
  if(!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {
    return;
  }

  $field = \Drupal::service('disqus.manager')->getFields($entity->getEntityTypeId());
  if(!$entity->hasField(key($field))) {
      return;
  }

  $config = \Drupal::config('disqus.settings');
  // Close/remove the thread on disqus if required.
  $action = $config->get('advanced.api.disqus_api_delete');
  if ($action != DISQUS_API_NO_ACTION) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array('forum' => $config->get('disqus_domain'), 'thread:ident' => "{$entity->getEntityTypeId()}/{$entity->id()}", 'thread' => '1'));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        \Drupal::logger('disqus')->error('Error loading thread details for entity : !identifier. Check your API keys.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
      }
      if (isset($thread->id)) {
        if ($action == DISQUS_API_CLOSE) {
          try {
            $disqus->threads->close(array('access_token' => $config->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $config->get('disqus_domain')));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error closing the thread on Disqus.'), 'error');
            \Drupal::logger('disqus')->error('Error closing thread for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
          }
        }
        if ($action == DISQUS_API_REMOVE) {
          try {
            $disqus->threads->remove(array('access_token' => $config->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $config->get('disqus_domain')));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error removing the thread on Disqus.'), 'error');
            \Drupal::logger('disqus')->error('Error closing thread for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function disqus_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Only act on content entities.
  if(!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {
    return;
  }

  $field = \Drupal::service('disqus.manager')->getFields($entity->getEntityTypeId());
  if(!$entity->hasField(key($field))) {
      return;
  }

  $config = \Drupal::config('disqus.settings');
  // Update the thread information on disqus if required.
  if ($config->get('advanced.api.disqus_api_update') && ($entity->label() != $entity->original->label() || $entity->url() != $entity->original->url())) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array('forum' => $config->get('disqus_domain'), 'thread:ident' => "{$entity->getEntityTypeId()}/{$entity->id()}", 'thread' => '1'));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        \Drupal::logger('disqus')->error('Error loading thread details for entity : !identifier. Check your API keys.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
      }
      if (isset($thread->id)) {
        try {
          $disqus->threads->update(array('access_token' => $config->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $config->get('disqus_domain'), 'title' => $entity->label(), 'url' => $entity->url('canonical',array('absolute' => TRUE))));
        }
        catch (Exception $exception) {
          drupal_set_message(t('There was an error updating the thread details on Disqus.'), 'error');
          \Drupal::logger('disqus')->error('Error updating thread details for entity : !identifier. Check your user access token.', array('!identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}"));
        }
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function disqus_views_data_alter(&$data) {
  // Number of Disqus comments made on the given node.
  $data['node']['disqus_comment_count']['field'] = array(
    'title' => t('Disqus Comment Count'),
    'group' => t('Content'),
    'help' => t('The number of Disqus comments made on the post. Note that this will not work in the preview.'),
    'id' => 'disqus_comment_count',
  );
}

/**
 * Implements hook_theme().
 */
function disqus_theme() {
  return array(
    'disqus_noscript' => array(
      'variables' => array('disqus' => NULL),
    ),
  );
}

/**
 * Prepares the noscript tag which is used when JavaScript is not available.
 *
 * @param $variables
 *   An array containing a "disqus" array, containing the following items:
 *     - "domain": The domain associated with this Disqus account.
 *     - "title": The title of the thread.
 *     - "developer": Whether or not testing is enabled.
 *     - "url": The disqus_url variable (http://disqus.com/docs/help/#faq-16).
 */
function theme_disqus_noscript($variables = array()) {
  $disqus = $variables['disqus'];
  
  $return = array(
    '#markup' => '<noscript><p>' . l(t('View the discussion thread.'), 'http://' . $disqus['domain'] . '.disqus.com/?url=' . urlencode($disqus['url'])) . '</p></noscript>',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'disqus') . '/disqus.js',
        array('type' => 'setting', 'data' => array('disqus' => $disqus))
      )
    )
  );

  return drupal_render($return);
}

/**
 * Implements hook_libraries_info().
 */
function disqus_libraries_info() {
  $libraries['disqusapi'] = array(
    'name' => 'Disqus PHP API',
    'vendor url' => 'https://github.com/disqus/disqus-php',
    'download url' => 'https://github.com/disqus/disqus-php',
    'version arguments' => array(
      'file' => 'disqusapi.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 20,
    ),
    'files' => array(
      'php' => array('disqusapi.php'),
    ),
  );
  return $libraries;
}

/**
 * Creates an instance of the Disqus PHP API.
 *
 * @return
 *   The instance of the Disqus API.
 */
function disqus_api() {
  if (\Drupal::moduleHandler()->moduleExists('libraries') && ($library = libraries_load('disqusapi')) && !empty($library['loaded'])) {
    try {
      $disqus = new DisqusAPI(\Drupal::config('disqus.settings')->get('advanced.disqus_secretkey'));
    }
    catch (Exception $exception) {
      drupal_set_message(t('There was an error loading the Disqus PHP API. Please check your API keys and try again.'), 'error');
      watchdog('disqus', 'Error loading the Disqus PHP API. Check your API keys.', array(), WATCHDOG_ERROR, 'admin/config/services/disqus');
      return FALSE;
    }
    return $disqus;
  }
  return FALSE;
}

/**
 * Implementation of hook_views_api().
 */
function disqus_views_api() {
  return array('api' => 3);
}
